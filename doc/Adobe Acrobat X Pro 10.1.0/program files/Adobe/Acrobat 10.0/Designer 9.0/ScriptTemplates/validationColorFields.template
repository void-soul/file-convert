function InitializeColorFields() {

	// Disable Acrobat's field highlighting. The Color
	// Failed Fields action takes care of highlighting fields.
	if (xfa.host.name == "Acrobat") {
	
		app.runtimeHighlight = false;
	}
}

function DoColorFields(oInvalidNode) {

	// If this form is running on a client other than Acrobat
	// (like on the server) then don't run this script
	if (xfa.host.name != "Acrobat") {
	
		return;
	}

	var sClassName = oInvalidNode.className;

	// Only color nodes that are <field>s or <exclGroup>s
	// Ignore everything else
	if ((sClassName != "field") && 
	    (sClassName != "exclGroup")) {
		
		return;
	}

	// If the node is a <field> that is a button or a barcode, then don't
	// do any color processing
	if (sClassName == "field") {
	
		var sUIClassName = oInvalidNode.ui.oneOfChild.className;

		if ((sUIClassName == "barcode") || 
		    (sUIClassName == "button")) {
		    
			return;
		}
	}

<#if ColorFailed>
	if (oInvalidNode.errorText == "") {
</#if><#if ColorMandatory>
	if ((oInvalidNode.errorText == "") &&
	    (oInvalidNode.validate != null) &&
	    (oInvalidNode.validate.getAttribute("nullTest") == "error")) {
</#if><#if ColorBoth>
	if (oInvalidNode.errorText == "") {
</#if>

		// Validation Succeeded
		// Revert the appearance to its original state

		// Get the object's definition from the template DOM
		// Getting information from the template DOM allows us to know what
		// the original settings for any given node were, before they changed
		// through runtime interactions
		var sSOM = oInvalidNode.somExpression;
		sSOM = sSOM.replace("xfa[0].form[0]", "xfa[0].template[0]");
		
		var oOriginalNode = xfa.resolveNode(sSOM);
		var oBorder = sClassName == "field" ? oInvalidNode.ui.oneOfChild.border : oInvalidNode.border;
		var oTemplateBorder = sClassName == "field" ? oOriginalNode.ui.oneOfChild.border : oOriginalNode.border;

<#if SetBorderColor>
		// Border color

		oBorder.presence = oTemplateBorder.presence;
		
		for (var i = 0; i < 4; i++) {
		
			var oEdge = oBorder.getElement("edge", i);
			var oTemplateEdge = oTemplateBorder.getElement("edge", i);
			
			oEdge.presence = oTemplateEdge.presence;
			oEdge.color.value = oTemplateEdge.color.value;
			oEdge.thickness = oTemplateEdge.thickness;
			oEdge.stroke = oTemplateEdge.stroke;
		}
</#if>
		
<#if SetBGColor>
		// Background color
		
		// Revert the presence of the border if it was made visible
		// to show the fill
		if (oTemplateBorder.presence != "visible") {
		
			oBorder.presence = oTemplateBorder.presence;
			oBorder.edge.presence = oTemplateBorder.edge.presence;
		}
		
		// The invalid fill type is always set to solid. Revert the fill type
		// if it changed from its original state
		var sOriginalFillType = oTemplateBorder.fill.oneOfChild.className;
		
		if (sOriginalFillType != "solid") {
		
			var oFillType = oBorder.fill.oneOfChild;
			oBorder.fill.nodes.remove(oFillType);
			
			var oOriginalFillType = xfa.form.createNode(sOriginalFillType, "");
			oOriginalFillType.type = oTemplateBorder.fill.oneOfChild.type;
			oOriginalFillType.color.value = oTemplateBorder.fill.oneOfChild.color.value;
			oBorder.fill.nodes.append(oOriginalFillType);
		}
		
		oBorder.fill.color.value = oTemplateBorder.fill.color.value;
</#if>
	}
<#if ColorFailed>
	else {
</#if><#if ColorMandatory>
	else if ((oInvalidNode.validate != null) && 
	         (oInvalidNode.validate.getAttribute("nullTest") == "error")) {
</#if><#if ColorBoth>
	else {
</#if>

		// Validation Failed
		// Show the invalid appearance
		var oFailedBorder = sClassName == "field" ? oInvalidNode.ui.oneOfChild.border : oInvalidNode.border;
<#if SetBorderColor>
<#if ColorFailed>
		var sBorderColor = "${FailedBorderColor}";
</#if><#if ColorMandatory>
		var sBorderColor = "${MandatoryBorderColor}";
</#if><#if ColorBoth>
		var sBorderColor;
		
		if ((oInvalidNode.validate != null) && 
		    (oInvalidNode.validate.getAttribute("nullTest") == "error") && 
		    (oInvalidNode.rawValue == null || oInvalidNode.rawValue.toString() == "")) {

			sBorderColor = "${MandatoryBorderColor}";
		}
		else {
		
			sBorderColor = "${FailedBorderColor}";
		}

		if (sBorderColor != "none") {
</#if>

<#if ColorBoth>	</#if>		// Border color
<#if ColorBoth>	</#if>		// Show a solid border with square corners

<#if ColorBoth>	</#if>		oFailedBorder.presence = "visible";
			
<#if ColorBoth>	</#if>		for (var i = 0; i < 4; i++) {

<#if ColorBoth>	</#if>			var oFailedEdge = oFailedBorder.getElement("edge", i);
				
<#if ColorBoth>	</#if>			oFailedEdge.presence = "visible";
<#if ColorBoth>	</#if>			oFailedEdge.color.value = sBorderColor;
<#if ColorBoth>	</#if>			oFailedEdge.thickness = "2pt";
<#if ColorBoth>	</#if>			oFailedEdge.stroke = "solid";
<#if ColorBoth>	</#if>		}
<#if ColorBoth>
		}
</#if></#if>

<#if SetBGColor>
		// Background color
		// Show a solid fill color
		
<#if ColorFailed>
		oFailedBorder.fill.color.value = "${FailedBackgroundColor}";
</#if><#if ColorMandatory>
		oFailedBorder.fill.color.value = "${MandatoryBackgroundColor}";
</#if><#if ColorBoth>
		var sFillColor;

		if ((oInvalidNode.validate != null) &&
		    (oInvalidNode.validate.getAttribute("nullTest") == "error") &&
		    (oInvalidNode.rawValue == null || oInvalidNode.rawValue.toString() == "")) {
		    
			sFillColor = "${MandatoryBackgroundColor}";
		}
		else {
		
			sFillColor = "${FailedBackgroundColor}";
		}
		
		if (sFillColor != "none") {
</#if>

<#if ColorBoth>	</#if>		// The presence of the border must be visible to show the fill.
<#if ColorBoth>	</#if>		// Hide the edges when the invalid appearance doesn't include
<#if ColorBoth>	</#if>		// changing the border color
<#if ColorBoth>	</#if>		if (oFailedBorder.presence != "visible") {

<#if ColorBoth>	</#if>			oFailedBorder.presence = "visible";
<#if ColorBoth>	</#if>			oFailedBorder.edge.presence = "invisible";
<#if ColorBoth>	</#if>		}
			
<#if ColorBoth>	</#if>		// Replace the current fill type with a solid fill
<#if ColorBoth>	</#if>		if (oFailedBorder.fill.oneOfChild.className != "solid") {

<#if ColorBoth>	</#if>			var oFailedFillType = oFailedBorder.fill.oneOfChild;
<#if ColorBoth>	</#if>			oFailedBorder.fill.nodes.remove(oFailedFillType);
				
<#if ColorBoth>	</#if>			var oSolid = xfa.form.createNode("solid", "");			
<#if ColorBoth>	</#if>			oFailedBorder.fill.nodes.append(oSolid);
<#if ColorBoth>	</#if>		}

<#if ColorBoth>
			oFailedBorder.fill.color.value = sFillColor;
		}
</#if></#if>
	}
}